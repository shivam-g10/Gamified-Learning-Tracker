services:
  db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-tracker}
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'
    # Remove external port exposure - database only accessible internally
    # ports:
    #   - '5433:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    # Add security configurations
    command: >
      postgres
      -c ssl=off
      -c listen_addresses=*
      -c max_connections=100
      -c shared_buffers=256MB
    # Restart policy for production
    restart: unless-stopped
    # Network isolation
    # networks:
    #   - app-network

  web:
    build:
      context: .
      args:
        DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-tracker}?schema=public
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-tracker}?schema=public
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
    # No external port mapping needed - Coolify handles proxying
    ports:
      - '${HOST_PORT:-3000}:${PORT:-3000}'
    # Restart policy for production
    restart: unless-stopped
    # Network isolation
    # networks:
    #   - app-network
    # Health check for web service
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${HOST_PORT:-3000}/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Watch mode for development
    develop:
      watch:
        - action: rebuild
          path: ./src
          ignore:
            - node_modules/
            - .next/
            - .git/
        - action: rebuild
          path: ./prisma
          ignore:
            - node_modules/
            - .git/
        - action: rebuild
          path: ./package.json
        - action: rebuild
          path: ./Dockerfile
        - action: rebuild
          path: ./docker-compose.yml

# Create isolated network for services
# networks:
#   app-network:
#     driver: bridge
#     # Additional network security
#     internal: false
#     # IPAM configuration for network isolation
#     ipam:
#       config:
#         - subnet: 172.25.0.0/16

volumes:
  db-data:
    # Volume security
    driver: local
