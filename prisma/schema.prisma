generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Quest {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  description String?
  xp          Int
  type        QuestType
  category    String
  done        Boolean    @default(false)
  created_at  DateTime   @default(now())

  @@map("quests")
}

enum QuestType {
  topic
  project
  bonus
}

model Book {
  id                    String                @id @default(uuid()) @db.Uuid
  title                 String
  author                String?
  total_pages           Int                   @default(0)
  current_page          Int                   @default(0)
  status                BookStatus            @default(backlog)
  description           String?
  category              String                @default("Uncategorized")
  tags                  String[]
  started_at            DateTime?
  finished_at           DateTime?
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  book_progress_entries BookProgressEntry[]

  @@map("books")
}

enum BookStatus {
  backlog
  reading
  finished
}

model BookProgressEntry {
  id         String   @id @default(uuid()) @db.Uuid
  book_id    String   @db.Uuid
  from_page  Int
  to_page    Int
  pages_read Int      @default(0)
  notes      String?
  created_at DateTime @default(now())
  book       Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)

  @@map("book_progress_entries")
}

model Course {
  id                    String                 @id @default(uuid()) @db.Uuid
  title                 String
  platform              String?
  url                   String?
  total_units           Int                    @default(0)
  completed_units       Int                    @default(0)
  status                CourseStatus           @default(backlog)
  description           String?
  category              String                 @default("Uncategorized")
  tags                  String[]
  started_at            DateTime?
  finished_at           DateTime?
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  course_progress_entries CourseProgressEntry[]

  @@map("courses")
}

enum CourseStatus {
  backlog
  learning
  finished
}

model CourseProgressEntry {
  id          String   @id @default(uuid()) @db.Uuid
  course_id   String   @db.Uuid
  units_delta Int
  notes       String?
  created_at  DateTime @default(now())
  course      Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@map("course_progress_entries")
}

model AppState {
  id            Int       @id @default(1)
  streak        Int       @default(0)
  last_check_in DateTime? @db.Date
  focus         String[]  @db.Uuid

  @@map("app_states")
}

model FocusSlot {
  id         String   @id @default(uuid()) @db.Uuid
  quest_id   String?  @db.Uuid
  book_id    String?  @db.Uuid
  course_id  String?  @db.Uuid
  updated_at DateTime @updatedAt
  
  @@unique([quest_id, book_id, course_id])
  @@map("focus_slots")
}


